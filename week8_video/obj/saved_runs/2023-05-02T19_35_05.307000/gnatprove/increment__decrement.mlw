module Increment__decrement__x
  use _gnatprove_standard.Main
  use int.Int
  
  val function x : int
end

module Increment__zeroten
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type zeroten = <range 0 10>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (10 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = zeroten,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type zeroten__ref = { mutable zeroten__content : zeroten }
  
  function zeroten__ref_zeroten__content__projection (a: zeroten__ref) : zeroten =
    a.zeroten__content
  
  meta "model_projection" function zeroten__ref_zeroten__content__projection
  
  meta "inline:no" function zeroten__ref_zeroten__content__projection
  
  val zeroten__havoc (x: zeroten__ref) : unit
    writes { x }
end

module Increment__zeroten___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Increment__zeroten as Increment__zeroten
  
  predicate dynamic_invariant (temp___expr_182: int) (temp___is_init_178: bool) (temp___skip_constant_179: bool) (temp___do_toplevel_180: bool) (temp___do_typ_inv_181: bool) =
    if ((temp___is_init_178 = True) \/
          (Increment__zeroten.first <= Increment__zeroten.last)) then
      (((Increment__zeroten.dynamic_property Increment__zeroten.first)
          Increment__zeroten.last)
         temp___expr_182)
    else true
  
  val dynamic_invariant (temp___expr_182: int) (temp___is_init_178: bool) (temp___skip_constant_179: bool) (temp___do_toplevel_180: bool) (temp___do_typ_inv_181: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_182 : int))
                      (temp___is_init_178 : bool))
                     (temp___skip_constant_179 : bool))
                    (temp___do_toplevel_180 : bool))
                   (temp___do_typ_inv_181 : bool)) }
  
  predicate default_initial_assumption (temp___expr_183: int) (temp___skip_top_level_184: bool) =
    true
  
  val default_initial_assumption (temp___expr_183: int) (temp___skip_top_level_184: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_183 : int))
                   (temp___skip_top_level_184 : bool)) }
end

module Increment__decrement__x___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Increment__decrement__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Increment__decrement__x as Increment__decrement__x
  use Increment__zeroten as Increment__zeroten
  use Increment__zeroten___axiom as Increment__zeroten___axiom
  use Increment__zeroten___axiom as Increment__zeroten___axiom
  use Increment__decrement__x___axiom as Increment__decrement__x___axiom
  
  val increment__decrement__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"increment.ads" 24 0 0] true }
    ensures { [#"increment.ads" 24 0 0]
              [#"increment.ads" 27 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@comment:       Post => decrement'Result = x + 1;                ^ increment.ads:27:16:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Sloc:increment.ads:27:16]
              [@GP_Id:6]
              [@GP_Pretty_Ada:1107]
              [@GP_Sloc:increment.ads:27:16]
              ((increment__decrement__result.int__content)
                 = (Increment__decrement__x.x + (1 : int))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram increment.ads:24]
      ());
     assume {
       ((((Increment__zeroten___axiom.dynamic_invariant
             Increment__decrement__x.x)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram increment.ads:24]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram increment.ads:24]
      ());
     (begin
        ensures { true }
        let _ = let _ = (Increment__decrement__x.x > (0 : int)) in () in ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram increment.ads:24] ());
     assume { [@GP_Pretty_Ada:1094] (Increment__decrement__x.x > (0 : int)) };
     (try
        ([@GP_Sloc:increment.adb:28:7]
         [#"increment.adb" 28 0 0]
         (([#"increment.adb" 28 0 0]
           (increment__decrement__result.int__content <-
              ([#"increment.adb" 28 0 0]
               [@GP_Shape:return__sub]
               [@vc:annotation]
               [@comment:      return x - 1;                ^ increment.adb:28:16:VC_RANGE_CHECK]
               [@GP_Sloc:increment.adb:28:16]
               [@GP_Reason:VC_RANGE_CHECK]
               [@GP_Id:5]
               (Increment__zeroten.range_check_
                  (Increment__decrement__x.x - (1 : int))))));
          ((raise Return__exc) : unit)));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((increment__decrement__result.int__content)
               = (Increment__decrement__x.x + (1 : int))) in
          () in
        ()
      end);
     (increment__decrement__result.int__content))
end
