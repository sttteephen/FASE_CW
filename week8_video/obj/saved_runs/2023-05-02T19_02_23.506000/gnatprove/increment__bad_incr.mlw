module Increment__bad_incr__x
  use _gnatprove_standard.Main
  use int.Int
  
  val function x : int
end

module Increment__tens
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tens = <range 1 10>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (10 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = tens,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type tens__ref = { mutable tens__content : tens }
  
  function tens__ref_tens__content__projection (a: tens__ref) : tens =
    a.tens__content
  
  meta "model_projection" function tens__ref_tens__content__projection
  
  meta "inline:no" function tens__ref_tens__content__projection
  
  val tens__havoc (x: tens__ref) : unit
    writes { x }
end

module Increment__tens___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Increment__tens as Increment__tens
  
  predicate dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) =
    if ((temp___is_init_162 = True) \/
          (Increment__tens.first <= Increment__tens.last)) then
      (((Increment__tens.dynamic_property Increment__tens.first)
          Increment__tens.last)
         temp___expr_166)
    else true
  
  val dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_166 : int))
                      (temp___is_init_162 : bool))
                     (temp___skip_constant_163 : bool))
                    (temp___do_toplevel_164 : bool))
                   (temp___do_typ_inv_165 : bool)) }
  
  predicate default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) =
    true
  
  val default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_167 : int))
                   (temp___skip_top_level_168 : bool)) }
end

module Increment__bad_incr__x___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Increment__bad_incr__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Increment__bad_incr__x as Increment__bad_incr__x
  use Increment__tens as Increment__tens
  use Increment__tens___axiom as Increment__tens___axiom
  use Increment__tens___axiom as Increment__tens___axiom
  use Increment__bad_incr__x___axiom as Increment__bad_incr__x___axiom
  
  val increment__bad_incr__result : int__ref
  
  let def (__void_param : unit)
    requires { [#"increment.ads" 6 0 0] true }
    ensures { [#"increment.ads" 6 0 0]
              [#"increment.ads" 9 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@comment:   Post => bad_incr'Result = x + 1;            ^ increment.ads:9:12:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:1]
              [@GP_Sloc:increment.ads:9:12]
              [@GP_Pretty_Ada:950]
              [@GP_Sloc:increment.ads:9:12]
              ((increment__bad_incr__result.int__content)
                 = (Increment__bad_incr__x.x + (1 : int))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram increment.ads:6]
      ());
     assume {
       ((((Increment__tens___axiom.dynamic_invariant Increment__bad_incr__x.x)
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram increment.ads:6]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram increment.ads:6]
      ());
     (begin
        ensures { true }
        let _ = let _ = (Increment__bad_incr__x.x < (9 : int)) in () in ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram increment.ads:6] ());
     assume { [@GP_Pretty_Ada:937] (Increment__bad_incr__x.x < (9 : int)) };
     (try
        ([@GP_Sloc:increment.adb:7:7]
         [#"increment.adb" 7 0 0]
         (([#"increment.adb" 7 0 0]
           (increment__bad_incr__result.int__content <-
              ([#"increment.adb" 7 0 0]
               [@vc:annotation]
               [@comment:      return x + 2;                ^ increment.adb:7:16:VC_RANGE_CHECK]
               [@GP_Reason:VC_RANGE_CHECK]
               [@GP_Shape:return__add]
               [@GP_Id:0]
               [@GP_Sloc:increment.adb:7:16]
               (Increment__tens.range_check_
                  (Increment__bad_incr__x.x + (2 : int))))));
          ((raise Return__exc) : unit)));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            ((increment__bad_incr__result.int__content)
               = (Increment__bad_incr__x.x + (1 : int))) in
          () in
        ()
      end);
     (increment__bad_incr__result.int__content))
end
