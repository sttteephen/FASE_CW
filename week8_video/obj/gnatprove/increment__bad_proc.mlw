module Increment__bad_proc__x
  use _gnatprove_standard.Main
  use int.Int
  
  val x : int__ref
end

module Increment__tens
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tens = <range 1 10>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (10 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = tens,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type tens__ref = { mutable tens__content : tens }
  
  function tens__ref_tens__content__projection (a: tens__ref) : tens =
    a.tens__content
  
  meta "model_projection" function tens__ref_tens__content__projection
  
  meta "inline:no" function tens__ref_tens__content__projection
  
  val tens__havoc (x: tens__ref) : unit
    writes { x }
end

module Increment__tens___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Increment__tens as Increment__tens
  
  predicate dynamic_invariant (temp___expr_168: int) (temp___is_init_164: bool) (temp___skip_constant_165: bool) (temp___do_toplevel_166: bool) (temp___do_typ_inv_167: bool) =
    if ((temp___is_init_164 = True) \/
          (Increment__tens.first <= Increment__tens.last)) then
      (((Increment__tens.dynamic_property Increment__tens.first)
          Increment__tens.last)
         temp___expr_168)
    else true
  
  val dynamic_invariant (temp___expr_168: int) (temp___is_init_164: bool) (temp___skip_constant_165: bool) (temp___do_toplevel_166: bool) (temp___do_typ_inv_167: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_168 : int))
                      (temp___is_init_164 : bool))
                     (temp___skip_constant_165 : bool))
                    (temp___do_toplevel_166 : bool))
                   (temp___do_typ_inv_167 : bool)) }
  
  predicate default_initial_assumption (temp___expr_169: int) (temp___skip_top_level_170: bool) =
    true
  
  val default_initial_assumption (temp___expr_169: int) (temp___skip_top_level_170: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_169 : int))
                   (temp___skip_top_level_170 : bool)) }
end

module Increment__bad_proc__x___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Increment__bad_proc__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Increment__bad_proc__x as Increment__bad_proc__x
  use Increment__tens as Increment__tens
  use Increment__tens___axiom as Increment__tens___axiom
  use Increment__tens___axiom as Increment__tens___axiom
  use Increment__bad_proc__x___axiom as Increment__bad_proc__x___axiom
  
  let def (__void_param : unit)
    requires { [#"increment.ads" 12 0 0] true }
    ensures { [#"increment.ads" 12 0 0]
              [#"increment.ads" 15 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Shape:pragargs__cmp]
              [@model_vc_post]
              [@GP_Id:3]
              [@comment:       Post => x = x'Old + 1;                ^ increment.ads:15:16:VC_POSTCONDITION]
              [@GP_Sloc:increment.ads:15:16]
              [@GP_Pretty_Ada:1063]
              [@GP_Sloc:increment.ads:15:16]
              ((Increment__bad_proc__x.x.int__content)
                 = ((old (Increment__bad_proc__x.x.int__content)) + (1 : int))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram increment.ads:12]
      ());
     assume {
       ((((Increment__tens___axiom.dynamic_invariant
             (Increment__bad_proc__x.x.int__content))
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram increment.ads:12]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram increment.ads:12]
      ());
     (begin
        ensures { true }
        let _ =
          let _ = ((Increment__bad_proc__x.x.int__content) < (10 : int)) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram increment.ads:12] ());
     assume {
       [@GP_Pretty_Ada:1050]
       ((Increment__bad_proc__x.x.int__content) < (10 : int)) };
     (let temp___old_186 = Increment__bad_proc__x.x.int__content in
      (try
         ([@GP_Sloc:increment.adb:13:9]
          [#"increment.adb" 13 0 0]
          [#"increment.adb" 13 0 0]
          (Increment__bad_proc__x.x.int__content <-
             ([#"increment.adb" 13 0 0]
              [@comment:      x := x+1;             ^ increment.adb:13:13:VC_RANGE_CHECK]
              [@GP_Sloc:increment.adb:13:13]
              [@vc:annotation]
              [@GP_Reason:VC_RANGE_CHECK]
              [@GP_Shape:x_assign__add]
              [@GP_Id:2]
              (Increment__tens.range_check_
                 ((Increment__bad_proc__x.x.int__content) + (1 : int))))));
         (raise Return__exc)
       with Return__exc -> ()
       end);
      (begin
         ensures { true }
         let _ =
           let _ =
             ((Increment__bad_proc__x.x.int__content)
                = (temp___old_186 + (1 : int))) in
           () in
         ()
       end)))
end
