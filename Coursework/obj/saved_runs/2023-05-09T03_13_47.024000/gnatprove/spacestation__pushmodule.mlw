module Spacestation__airlockstatus
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type airlockstatus
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = airlockstatus,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type airlockstatus__ref = {
                           mutable airlockstatus__content : airlockstatus
                           }
  
  function airlockstatus__ref_airlockstatus__content__projection (a: airlockstatus__ref) : airlockstatus =
    a.airlockstatus__content
  
  meta "model_projection" function airlockstatus__ref_airlockstatus__content__projection
  
  meta "inline:no" function airlockstatus__ref_airlockstatus__content__projection
  
  val airlockstatus__havoc (x: airlockstatus__ref) : unit
    writes { x }
end

module Spacestation__airlockstatus__rep
  use Spacestation__airlockstatus as Spacestation__airlockstatus
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Spacestation__airlockstatus.airlockstatus,
    predicate in_range = Spacestation__airlockstatus.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Spacestation__orbitheight
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type orbitheight = <range 350 450>
  
  val function first : int
    ensures { result = (350 : int) }
  
  val function last : int
    ensures { result = (450 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = orbitheight,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type orbitheight__ref = { mutable orbitheight__content : orbitheight }
  
  function orbitheight__ref_orbitheight__content__projection (a: orbitheight__ref) : orbitheight =
    a.orbitheight__content
  
  meta "model_projection" function orbitheight__ref_orbitheight__content__projection
  
  meta "inline:no" function orbitheight__ref_orbitheight__content__projection
  
  val orbitheight__havoc (x: orbitheight__ref) : unit
    writes { x }
end

module Spacestation__orbitheight__rep
  use Spacestation__orbitheight as Spacestation__orbitheight
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Spacestation__orbitheight.orbitheight) : int =
    Spacestation__orbitheight.orbitheight'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Spacestation__orbitheight.orbitheight,
    predicate in_range = Spacestation__orbitheight.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Spacestation__modulerange
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type modulerange = <range 1 20>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (20 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = modulerange,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type modulerange__ref = { mutable modulerange__content : modulerange }
  
  function modulerange__ref_modulerange__content__projection (a: modulerange__ref) : modulerange =
    a.modulerange__content
  
  meta "model_projection" function modulerange__ref_modulerange__content__projection
  
  meta "inline:no" function modulerange__ref_modulerange__content__projection
  
  val modulerange__havoc (x: modulerange__ref) : unit
    writes { x }
end

module Spacestation__modulerange__rep
  use Spacestation__modulerange as Spacestation__modulerange
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Spacestation__modulerange.modulerange) : int =
    Spacestation__modulerange.modulerange'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Spacestation__modulerange.modulerange,
    predicate in_range = Spacestation__modulerange.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Spacestation__module
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type module__ = <range 0 3>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = module__,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type module____ref = { mutable module____content : module__ }
  
  function module____ref_module____content__projection (a: module____ref) : module__ =
    a.module____content
  
  meta "model_projection" function module____ref_module____content__projection
  
  meta "inline:no" function module____ref_module____content__projection
  
  val module____havoc (x: module____ref) : unit
    writes { x }
end

module Spacestation__module__rep
  use Spacestation__module as Spacestation__module
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Spacestation__module.module__) : int =
    Spacestation__module.module__'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Spacestation__module.module__,
    predicate in_range = Spacestation__module.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Spacestation__module
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__module as Spacestation__module
  use Spacestation__module__rep as Spacestation__module__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Spacestation__module.module__
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_161 : int.
          if ((a__first <= temp___idx_161) /\ (temp___idx_161 <= a__last)) then
            ((Spacestation__module__rep.to_rep ((get a) temp___idx_161))
               = (Spacestation__module__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_161))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_161 : int.
                 if ((a__first <= temp___idx_161) /\
                       (temp___idx_161 <= a__last)) then
                   ((Spacestation__module__rep.to_rep
                       ((get a) temp___idx_161))
                      = (Spacestation__module__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_161))))
                 else true)))
end

module Spacestation__modulestack
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__module as Spacestation__module
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  
  type component_type = Spacestation__module.module__
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (20 : int) }
  
  clone export ada__model.Constr_Array with
    axiom .,
    type map = Array__Int__Spacestation__module.map,
    function array_bool_eq = Array__Int__Spacestation__module.bool_eq,
    function first = first,
    function last = last,
    type index_rep_type = int
end

module Spacestation__monitoringstation__rep
  use _gnatprove_standard.Main
  use int.Int
  use Spacestation__airlockstatus as Spacestation__airlockstatus
  use Spacestation__airlockstatus__rep as Spacestation__airlockstatus__rep
  use Spacestation__orbitheight as Spacestation__orbitheight
  use Spacestation__orbitheight__rep as Spacestation__orbitheight__rep
  use Spacestation__modulerange as Spacestation__modulerange
  use Spacestation__modulerange__rep as Spacestation__modulerange__rep
  use Spacestation__modulestack as Spacestation__modulestack
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  
  type __split_fields = {
                       rec__spacestation__monitoringstation__airlock1 :
                         Spacestation__airlockstatus.airlockstatus;
                       rec__spacestation__monitoringstation__airlock2 :
                         Spacestation__airlockstatus.airlockstatus;
                       rec__spacestation__monitoringstation__height :
                         Spacestation__orbitheight.orbitheight;
                       rec__spacestation__monitoringstation__modules :
                         Array__Int__Spacestation__module.map;
                       rec__spacestation__monitoringstation__modulescount :
                         Spacestation__modulerange.modulerange
                       }
  
  function __split_fields_rec__spacestation__monitoringstation__airlock1__projection (a: __split_fields) : 
    Spacestation__airlockstatus.airlockstatus =
    a.rec__spacestation__monitoringstation__airlock1
  
  meta "model_projection" function __split_fields_rec__spacestation__monitoringstation__airlock1__projection
  
  meta "inline:no" function __split_fields_rec__spacestation__monitoringstation__airlock1__projection
  
  function __split_fields_rec__spacestation__monitoringstation__airlock2__projection (a: __split_fields) : 
    Spacestation__airlockstatus.airlockstatus =
    a.rec__spacestation__monitoringstation__airlock2
  
  meta "model_projection" function __split_fields_rec__spacestation__monitoringstation__airlock2__projection
  
  meta "inline:no" function __split_fields_rec__spacestation__monitoringstation__airlock2__projection
  
  function __split_fields_rec__spacestation__monitoringstation__height__projection (a: __split_fields) : 
    Spacestation__orbitheight.orbitheight =
    a.rec__spacestation__monitoringstation__height
  
  meta "model_projection" function __split_fields_rec__spacestation__monitoringstation__height__projection
  
  meta "inline:no" function __split_fields_rec__spacestation__monitoringstation__height__projection
  
  function __split_fields_rec__spacestation__monitoringstation__modules__projection (a: __split_fields) : 
    Array__Int__Spacestation__module.map =
    a.rec__spacestation__monitoringstation__modules
  
  meta "model_projection" function __split_fields_rec__spacestation__monitoringstation__modules__projection
  
  meta "inline:no" function __split_fields_rec__spacestation__monitoringstation__modules__projection
  
  function __split_fields_rec__spacestation__monitoringstation__modulescount__projection (a: __split_fields) : 
    Spacestation__modulerange.modulerange =
    a.rec__spacestation__monitoringstation__modulescount
  
  meta "model_projection" function __split_fields_rec__spacestation__monitoringstation__modulescount__projection
  
  meta "inline:no" function __split_fields_rec__spacestation__monitoringstation__modulescount__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate spacestation__monitoringstation__airlock1__pred (a: __rep) = true
  
  val spacestation__monitoringstation__airlock1__pred (a: __rep) : bool
    ensures { result
                <->
                (spacestation__monitoringstation__airlock1__pred (a : __rep)) }
  
  val rec__spacestation__monitoringstation__airlock1_ (a: __rep) : Spacestation__airlockstatus.airlockstatus
    requires { spacestation__monitoringstation__airlock1__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacestation__monitoringstation__airlock1)) }
  
  predicate spacestation__monitoringstation__airlock2__pred (a: __rep) = true
  
  val spacestation__monitoringstation__airlock2__pred (a: __rep) : bool
    ensures { result
                <->
                (spacestation__monitoringstation__airlock2__pred (a : __rep)) }
  
  val rec__spacestation__monitoringstation__airlock2_ (a: __rep) : Spacestation__airlockstatus.airlockstatus
    requires { spacestation__monitoringstation__airlock2__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacestation__monitoringstation__airlock2)) }
  
  predicate spacestation__monitoringstation__height__pred (a: __rep) = true
  
  val spacestation__monitoringstation__height__pred (a: __rep) : bool
    ensures { result
                <->
                (spacestation__monitoringstation__height__pred (a : __rep)) }
  
  val rec__spacestation__monitoringstation__height_ (a: __rep) : Spacestation__orbitheight.orbitheight
    requires { spacestation__monitoringstation__height__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacestation__monitoringstation__height)) }
  
  predicate spacestation__monitoringstation__modules__pred (a: __rep) = true
  
  val spacestation__monitoringstation__modules__pred (a: __rep) : bool
    ensures { result
                <->
                (spacestation__monitoringstation__modules__pred (a : __rep)) }
  
  val rec__spacestation__monitoringstation__modules_ (a: __rep) : Array__Int__Spacestation__module.map
    requires { spacestation__monitoringstation__modules__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacestation__monitoringstation__modules)) }
  
  predicate spacestation__monitoringstation__modulescount__pred (a: __rep) =
    true
  
  val spacestation__monitoringstation__modulescount__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (spacestation__monitoringstation__modulescount__pred
                   (a : __rep)) }
  
  val rec__spacestation__monitoringstation__modulescount_ (a: __rep) : 
    Spacestation__modulerange.modulerange
    requires { spacestation__monitoringstation__modulescount__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacestation__monitoringstation__modulescount)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Spacestation__airlockstatus__rep.to_rep
             ((__split_fields a).rec__spacestation__monitoringstation__airlock1))
            = (Spacestation__airlockstatus__rep.to_rep
                 ((__split_fields b).rec__spacestation__monitoringstation__airlock1))) /\
           ((Spacestation__airlockstatus__rep.to_rep
               ((__split_fields a).rec__spacestation__monitoringstation__airlock2))
              = (Spacestation__airlockstatus__rep.to_rep
                   ((__split_fields b).rec__spacestation__monitoringstation__airlock2)))) /\
          ((((Spacestation__orbitheight__rep.to_rep
                ((__split_fields a).rec__spacestation__monitoringstation__height))
               = (Spacestation__orbitheight__rep.to_rep
                    ((__split_fields b).rec__spacestation__monitoringstation__height))) /\
              ((Spacestation__modulestack.bool_eq
                  ((__split_fields a).rec__spacestation__monitoringstation__modules))
                 ((__split_fields b).rec__spacestation__monitoringstation__modules))) /\
             ((Spacestation__modulerange__rep.to_rep
                 ((__split_fields a).rec__spacestation__monitoringstation__modulescount))
                = (Spacestation__modulerange__rep.to_rep
                     ((__split_fields b).rec__spacestation__monitoringstation__modulescount))))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Spacestation__monitoringstation
  use export Spacestation__monitoringstation__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type monitoringstation = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function spacestation__monitoringstation__airlock1__first__bit : 
    int
  
  val function spacestation__monitoringstation__airlock1__last__bit : 
    int
  
  val function spacestation__monitoringstation__airlock1__position : 
    int
  
  axiom spacestation__monitoringstation__airlock1__first__bit_axiom:
    (spacestation__monitoringstation__airlock1__first__bit >= (0 : int))
  
  axiom spacestation__monitoringstation__airlock1__last__bit_axiom:
    (spacestation__monitoringstation__airlock1__last__bit
       > spacestation__monitoringstation__airlock1__first__bit)
  
  axiom spacestation__monitoringstation__airlock1__position_axiom:
    (spacestation__monitoringstation__airlock1__position >= (0 : int))
  
  val function spacestation__monitoringstation__airlock2__first__bit : 
    int
  
  val function spacestation__monitoringstation__airlock2__last__bit : 
    int
  
  val function spacestation__monitoringstation__airlock2__position : 
    int
  
  axiom spacestation__monitoringstation__airlock2__first__bit_axiom:
    (spacestation__monitoringstation__airlock2__first__bit >= (0 : int))
  
  axiom spacestation__monitoringstation__airlock2__last__bit_axiom:
    (spacestation__monitoringstation__airlock2__last__bit
       > spacestation__monitoringstation__airlock2__first__bit)
  
  axiom spacestation__monitoringstation__airlock2__position_axiom:
    (spacestation__monitoringstation__airlock2__position >= (0 : int))
  
  val function spacestation__monitoringstation__height__first__bit : 
    int
  
  val function spacestation__monitoringstation__height__last__bit : int
  
  val function spacestation__monitoringstation__height__position : int
  
  axiom spacestation__monitoringstation__height__first__bit_axiom:
    (spacestation__monitoringstation__height__first__bit >= (0 : int))
  
  axiom spacestation__monitoringstation__height__last__bit_axiom:
    (spacestation__monitoringstation__height__last__bit
       > spacestation__monitoringstation__height__first__bit)
  
  axiom spacestation__monitoringstation__height__position_axiom:
    (spacestation__monitoringstation__height__position >= (0 : int))
  
  val function spacestation__monitoringstation__modules__first__bit : 
    int
  
  val function spacestation__monitoringstation__modules__last__bit : 
    int
  
  val function spacestation__monitoringstation__modules__position : int
  
  axiom spacestation__monitoringstation__modules__first__bit_axiom:
    (spacestation__monitoringstation__modules__first__bit >= (0 : int))
  
  axiom spacestation__monitoringstation__modules__last__bit_axiom:
    (spacestation__monitoringstation__modules__last__bit
       > spacestation__monitoringstation__modules__first__bit)
  
  axiom spacestation__monitoringstation__modules__position_axiom:
    (spacestation__monitoringstation__modules__position >= (0 : int))
  
  val function spacestation__monitoringstation__modulescount__first__bit : 
    int
  
  val function spacestation__monitoringstation__modulescount__last__bit : 
    int
  
  val function spacestation__monitoringstation__modulescount__position : 
    int
  
  axiom spacestation__monitoringstation__modulescount__first__bit_axiom:
    (spacestation__monitoringstation__modulescount__first__bit >= (0 : int))
  
  axiom spacestation__monitoringstation__modulescount__last__bit_axiom:
    (spacestation__monitoringstation__modulescount__last__bit
       > spacestation__monitoringstation__modulescount__first__bit)
  
  axiom spacestation__monitoringstation__modulescount__position_axiom:
    (spacestation__monitoringstation__modulescount__position >= (0 : int))
  
  val function user_eq (a: monitoringstation) (b: monitoringstation) : 
    bool
  
  val function dummy : monitoringstation
  
  type monitoringstation__ref = {
                               mutable monitoringstation__content :
                                 monitoringstation
                               }
  
  function monitoringstation__ref_monitoringstation__content__projection (a: monitoringstation__ref) : monitoringstation =
    a.monitoringstation__content
  
  meta "model_projection" function monitoringstation__ref_monitoringstation__content__projection
  
  meta "inline:no" function monitoringstation__ref_monitoringstation__content__projection
  
  val monitoringstation__havoc (x: monitoringstation__ref) : unit
    writes { x }
end

module Spacestation__solaris
  use _gnatprove_standard.Main
  use int.Int
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  
  val solaris__split_fields : Spacestation__monitoringstation.__split_fields__ref
end

module Spacestation__monitoringstation___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  use Spacestation__airlockstatus as Spacestation__airlockstatus
  use Spacestation__airlockstatus__rep as Spacestation__airlockstatus__rep
  use Spacestation__orbitheight as Spacestation__orbitheight
  use Spacestation__orbitheight__rep as Spacestation__orbitheight__rep
  use Spacestation__modulerange as Spacestation__modulerange
  use Spacestation__modulerange__rep as Spacestation__modulerange__rep
  
  predicate dynamic_invariant (temp___expr_218: Spacestation__monitoringstation.monitoringstation) (temp___is_init_214: bool) (temp___skip_constant_215: bool) (temp___do_toplevel_216: bool) (temp___do_typ_inv_217: bool) =
    true
  
  val dynamic_invariant (temp___expr_218: Spacestation__monitoringstation.monitoringstation) (temp___is_init_214: bool) (temp___skip_constant_215: bool) (temp___do_toplevel_216: bool) (temp___do_typ_inv_217: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_218 :
                          Spacestation__monitoringstation.monitoringstation))
                      (temp___is_init_214 : bool))
                     (temp___skip_constant_215 : bool))
                    (temp___do_toplevel_216 : bool))
                   (temp___do_typ_inv_217 : bool)) }
  
  predicate default_initial_assumption (temp___expr_220: Spacestation__monitoringstation.monitoringstation) (temp___skip_top_level_221: bool) =
    (((if (Spacestation__monitoringstation.spacestation__monitoringstation__airlock1__pred
             temp___expr_220) then
         ((Spacestation__airlockstatus__rep.to_rep
             ((Spacestation__monitoringstation.__split_fields temp___expr_220).
                Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock1))
            = (1 : int))
       else true) /\
        (if (Spacestation__monitoringstation.spacestation__monitoringstation__airlock2__pred
               temp___expr_220) then
           ((Spacestation__airlockstatus__rep.to_rep
               ((Spacestation__monitoringstation.__split_fields
                    temp___expr_220).Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock2))
              = (1 : int))
         else true)) /\
       ((if (Spacestation__monitoringstation.spacestation__monitoringstation__height__pred
               temp___expr_220) then
           ((Spacestation__orbitheight__rep.to_rep
               ((Spacestation__monitoringstation.__split_fields
                    temp___expr_220).Spacestation__monitoringstation.rec__spacestation__monitoringstation__height))
              = (400 : int))
         else true) /\
          (if (Spacestation__monitoringstation.spacestation__monitoringstation__modulescount__pred
                 temp___expr_220) then
             ((Spacestation__modulerange__rep.to_rep
                 ((Spacestation__monitoringstation.__split_fields
                      temp___expr_220).Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
                = (1 : int))
           else true)))
  
  val default_initial_assumption (temp___expr_220: Spacestation__monitoringstation.monitoringstation) (temp___skip_top_level_221: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_220 :
                       Spacestation__monitoringstation.monitoringstation))
                   (temp___skip_top_level_221 : bool)) }
end

module Spacestation__airlockinvariant
  use _gnatprove_standard.Main
  use int.Int
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  
  val function airlockinvariant (Spacestation__solaris___solaris__split_fields___: 
    Spacestation__monitoringstation.__split_fields) : bool
  
  val predicate airlockinvariant__function_guard (temp___result_162: bool) (Spacestation__solaris___solaris__split_fields___: 
    Spacestation__monitoringstation.__split_fields)
end

module Spacestation__airlockinvariant___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__solaris as Spacestation__solaris
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  use Spacestation__monitoringstation___axiom as Spacestation__monitoringstation___axiom
  use Spacestation__airlockinvariant as Spacestation__airlockinvariant
  use Spacestation__airlockstatus as Spacestation__airlockstatus
  use Spacestation__airlockstatus__rep as Spacestation__airlockstatus__rep
  
  val airlockinvariant (__void_param: unit) : bool
    reads { Spacestation__solaris.solaris__split_fields }
    requires { true }
    writes {  }
    ensures { (((result
                   = (Spacestation__airlockinvariant.airlockinvariant
                        (Spacestation__monitoringstation.__split_fields__content
                            Spacestation__solaris.solaris__split_fields))) /\
                  ((Spacestation__airlockinvariant.airlockinvariant__function_guard
                      result)
                     (Spacestation__monitoringstation.__split_fields__content
                         Spacestation__solaris.solaris__split_fields))) /\
                 (result
                    = (((Spacestation__airlockstatus__rep.to_rep
                           ((Spacestation__monitoringstation.__split_fields
                                { Spacestation__monitoringstation.__split_fields =
                                    (Spacestation__monitoringstation.__split_fields__content
                                        Spacestation__solaris.solaris__split_fields) }).
                              Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock1))
                          = (1 : int)) \/
                         ((Spacestation__airlockstatus__rep.to_rep
                             ((Spacestation__monitoringstation.__split_fields
                                  { Spacestation__monitoringstation.__split_fields =
                                      (Spacestation__monitoringstation.__split_fields__content
                                          Spacestation__solaris.solaris__split_fields) }).
                                Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock2))
                            = (1 : int))))) }
  
  axiom airlockinvariant__post_axiom:
    forall Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields
          [Spacestation__airlockinvariant.airlockinvariant
             Spacestation__solaris___solaris__split_fields___].
      ((((((Spacestation__monitoringstation___axiom.dynamic_invariant
              { Spacestation__monitoringstation.__split_fields =
                  Spacestation__solaris___solaris__split_fields___ })
             True)
            True)
           True)
          True) ->
         (let result =
            Spacestation__airlockinvariant.airlockinvariant
              Spacestation__solaris___solaris__split_fields___ in
          if ((Spacestation__airlockinvariant.airlockinvariant__function_guard
                 result)
                Spacestation__solaris___solaris__split_fields___) then
            ((true /\ true) /\ true)
          else true))
  
  axiom airlockinvariant__def_axiom:
    forall Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields
          [Spacestation__airlockinvariant.airlockinvariant
             Spacestation__solaris___solaris__split_fields___].
      ((Spacestation__airlockinvariant.airlockinvariant
          Spacestation__solaris___solaris__split_fields___)
         = (((Spacestation__airlockstatus__rep.to_rep
                ((Spacestation__monitoringstation.__split_fields
                     { Spacestation__monitoringstation.__split_fields =
                         Spacestation__solaris___solaris__split_fields___ }).
                   Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock1))
               = (1 : int)) \/
              ((Spacestation__airlockstatus__rep.to_rep
                  ((Spacestation__monitoringstation.__split_fields
                       { Spacestation__monitoringstation.__split_fields =
                           Spacestation__solaris___solaris__split_fields___ }).
                     Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock2))
                 = (1 : int))))
end

module Spacestation__orbitheightinvariant
  use _gnatprove_standard.Main
  use int.Int
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  
  val function orbitheightinvariant (Spacestation__solaris___solaris__split_fields___: 
    Spacestation__monitoringstation.__split_fields) : bool
  
  val predicate orbitheightinvariant__function_guard (temp___result_163: bool) (Spacestation__solaris___solaris__split_fields___: 
    Spacestation__monitoringstation.__split_fields)
end

module Spacestation__orbitheightinvariant___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__solaris as Spacestation__solaris
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  use Spacestation__monitoringstation___axiom as Spacestation__monitoringstation___axiom
  use Spacestation__orbitheightinvariant as Spacestation__orbitheightinvariant
  use Spacestation__orbitheight as Spacestation__orbitheight
  use Spacestation__orbitheight__rep as Spacestation__orbitheight__rep
  
  val orbitheightinvariant (__void_param: unit) : bool
    reads { Spacestation__solaris.solaris__split_fields }
    requires { true }
    writes {  }
    ensures { (((result
                   = (Spacestation__orbitheightinvariant.orbitheightinvariant
                        (Spacestation__monitoringstation.__split_fields__content
                            Spacestation__solaris.solaris__split_fields))) /\
                  ((Spacestation__orbitheightinvariant.orbitheightinvariant__function_guard
                      result)
                     (Spacestation__monitoringstation.__split_fields__content
                         Spacestation__solaris.solaris__split_fields))) /\
                 (result
                    = (((Spacestation__orbitheight__rep.to_rep
                           ((Spacestation__monitoringstation.__split_fields
                                { Spacestation__monitoringstation.__split_fields =
                                    (Spacestation__monitoringstation.__split_fields__content
                                        Spacestation__solaris.solaris__split_fields) }).
                              Spacestation__monitoringstation.rec__spacestation__monitoringstation__height))
                          >= (350 : int)) /\
                         ((Spacestation__orbitheight__rep.to_rep
                             ((Spacestation__monitoringstation.__split_fields
                                  { Spacestation__monitoringstation.__split_fields =
                                      (Spacestation__monitoringstation.__split_fields__content
                                          Spacestation__solaris.solaris__split_fields) }).
                                Spacestation__monitoringstation.rec__spacestation__monitoringstation__height))
                            <= (450 : int))))) }
  
  axiom orbitheightinvariant__post_axiom:
    forall Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields
          [Spacestation__orbitheightinvariant.orbitheightinvariant
             Spacestation__solaris___solaris__split_fields___].
      ((((((Spacestation__monitoringstation___axiom.dynamic_invariant
              { Spacestation__monitoringstation.__split_fields =
                  Spacestation__solaris___solaris__split_fields___ })
             True)
            True)
           True)
          True) ->
         (let result =
            Spacestation__orbitheightinvariant.orbitheightinvariant
              Spacestation__solaris___solaris__split_fields___ in
          if ((Spacestation__orbitheightinvariant.orbitheightinvariant__function_guard
                 result)
                Spacestation__solaris___solaris__split_fields___) then
            ((true /\ true) /\ true)
          else true))
  
  axiom orbitheightinvariant__def_axiom:
    forall Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields
          [Spacestation__orbitheightinvariant.orbitheightinvariant
             Spacestation__solaris___solaris__split_fields___].
      ((Spacestation__orbitheightinvariant.orbitheightinvariant
          Spacestation__solaris___solaris__split_fields___)
         = (((Spacestation__orbitheight__rep.to_rep
                ((Spacestation__monitoringstation.__split_fields
                     { Spacestation__monitoringstation.__split_fields =
                         Spacestation__solaris___solaris__split_fields___ }).
                   Spacestation__monitoringstation.rec__spacestation__monitoringstation__height))
               >= (350 : int)) /\
              ((Spacestation__orbitheight__rep.to_rep
                  ((Spacestation__monitoringstation.__split_fields
                       { Spacestation__monitoringstation.__split_fields =
                           Spacestation__solaris___solaris__split_fields___ }).
                     Spacestation__monitoringstation.rec__spacestation__monitoringstation__height))
                 <= (450 : int))))
end

module Spacestation__full
  use _gnatprove_standard.Main
  use int.Int
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  
  val function full (Spacestation__solaris___solaris__split_fields___: 
    Spacestation__monitoringstation.__split_fields) : bool
  
  val predicate full__function_guard (temp___result_165: bool) (Spacestation__solaris___solaris__split_fields___: 
    Spacestation__monitoringstation.__split_fields)
end

module Spacestation__full___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__solaris as Spacestation__solaris
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  use Spacestation__monitoringstation___axiom as Spacestation__monitoringstation___axiom
  use Spacestation__full as Spacestation__full
  use Spacestation__modulerange as Spacestation__modulerange
  use Spacestation__modulerange__rep as Spacestation__modulerange__rep
  
  val full (__void_param: unit) : bool
    reads { Spacestation__solaris.solaris__split_fields }
    requires { true }
    writes {  }
    ensures { (((result
                   = (Spacestation__full.full
                        (Spacestation__monitoringstation.__split_fields__content
                            Spacestation__solaris.solaris__split_fields))) /\
                  ((Spacestation__full.full__function_guard result)
                     (Spacestation__monitoringstation.__split_fields__content
                         Spacestation__solaris.solaris__split_fields))) /\
                 (result
                    = ((Spacestation__modulerange__rep.to_rep
                          ((Spacestation__monitoringstation.__split_fields
                               { Spacestation__monitoringstation.__split_fields =
                                   (Spacestation__monitoringstation.__split_fields__content
                                       Spacestation__solaris.solaris__split_fields) }).
                             Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
                         = (20 : int)))) }
  
  axiom full__post_axiom:
    forall Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields
          [Spacestation__full.full
             Spacestation__solaris___solaris__split_fields___].
      ((((((Spacestation__monitoringstation___axiom.dynamic_invariant
              { Spacestation__monitoringstation.__split_fields =
                  Spacestation__solaris___solaris__split_fields___ })
             True)
            True)
           True)
          True) ->
         (let result =
            Spacestation__full.full
              Spacestation__solaris___solaris__split_fields___ in
          if ((Spacestation__full.full__function_guard result)
                Spacestation__solaris___solaris__split_fields___) then
            ((true /\ true) /\ true)
          else true))
  
  axiom full__def_axiom:
    forall Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields
          [Spacestation__full.full
             Spacestation__solaris___solaris__split_fields___].
      ((Spacestation__full.full
          Spacestation__solaris___solaris__split_fields___)
         = ((Spacestation__modulerange__rep.to_rep
               ((Spacestation__monitoringstation.__split_fields
                    { Spacestation__monitoringstation.__split_fields =
                        Spacestation__solaris___solaris__split_fields___ }).
                  Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
              = (20 : int)))
end

module Spacestation__pushmodule__newmodule
  use _gnatprove_standard.Main
  use int.Int
  
  val newmodule : int__ref
end

module Spacestation__module___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__module as Spacestation__module
  
  predicate dynamic_invariant (temp___expr_187: int) (temp___is_init_183: bool) (temp___skip_constant_184: bool) (temp___do_toplevel_185: bool) (temp___do_typ_inv_186: bool) =
    if ((temp___is_init_183 = True) \/
          (Spacestation__module.first <= Spacestation__module.last)) then
      (((Spacestation__module.dynamic_property Spacestation__module.first)
          Spacestation__module.last)
         temp___expr_187)
    else true
  
  val dynamic_invariant (temp___expr_187: int) (temp___is_init_183: bool) (temp___skip_constant_184: bool) (temp___do_toplevel_185: bool) (temp___do_typ_inv_186: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_187 : int))
                      (temp___is_init_183 : bool))
                     (temp___skip_constant_184 : bool))
                    (temp___do_toplevel_185 : bool))
                   (temp___do_typ_inv_186 : bool)) }
  
  predicate default_initial_assumption (temp___expr_188: int) (temp___skip_top_level_189: bool) =
    true
  
  val default_initial_assumption (temp___expr_188: int) (temp___skip_top_level_189: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_188 : int))
                   (temp___skip_top_level_189 : bool)) }
end

module Spacestation__pushmodule__newmodule___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacestation__airlockstatus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__airlockstatus as Spacestation__airlockstatus
  
  predicate dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) =
    if ((temp___is_init_169 = True) \/
          (Spacestation__airlockstatus.first
             <= Spacestation__airlockstatus.last)) then
      (((Spacestation__airlockstatus.dynamic_property
           Spacestation__airlockstatus.first)
          Spacestation__airlockstatus.last)
         temp___expr_173)
    else true
  
  val dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_173 : int))
                      (temp___is_init_169 : bool))
                     (temp___skip_constant_170 : bool))
                    (temp___do_toplevel_171 : bool))
                   (temp___do_typ_inv_172 : bool)) }
  
  predicate default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) =
    true
  
  val default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_174 : int))
                   (temp___skip_top_level_175 : bool)) }
end

module Spacestation__orbitheight___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__orbitheight as Spacestation__orbitheight
  
  predicate dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) =
    if ((temp___is_init_176 = True) \/
          (Spacestation__orbitheight.first <= Spacestation__orbitheight.last)) then
      (((Spacestation__orbitheight.dynamic_property
           Spacestation__orbitheight.first)
          Spacestation__orbitheight.last)
         temp___expr_180)
    else true
  
  val dynamic_invariant (temp___expr_180: int) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_180 : int))
                      (temp___is_init_176 : bool))
                     (temp___skip_constant_177 : bool))
                    (temp___do_toplevel_178 : bool))
                   (temp___do_typ_inv_179 : bool)) }
  
  predicate default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) =
    true
  
  val default_initial_assumption (temp___expr_181: int) (temp___skip_top_level_182: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_181 : int))
                   (temp___skip_top_level_182 : bool)) }
end

module Spacestation__modulerange___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacestation__modulerange as Spacestation__modulerange
  
  predicate dynamic_invariant (temp___expr_194: int) (temp___is_init_190: bool) (temp___skip_constant_191: bool) (temp___do_toplevel_192: bool) (temp___do_typ_inv_193: bool) =
    if ((temp___is_init_190 = True) \/
          (Spacestation__modulerange.first <= Spacestation__modulerange.last)) then
      (((Spacestation__modulerange.dynamic_property
           Spacestation__modulerange.first)
          Spacestation__modulerange.last)
         temp___expr_194)
    else true
  
  val dynamic_invariant (temp___expr_194: int) (temp___is_init_190: bool) (temp___skip_constant_191: bool) (temp___do_toplevel_192: bool) (temp___do_typ_inv_193: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_194 : int))
                      (temp___is_init_190 : bool))
                     (temp___skip_constant_191 : bool))
                    (temp___do_toplevel_192 : bool))
                   (temp___do_typ_inv_193 : bool)) }
  
  predicate default_initial_assumption (temp___expr_195: int) (temp___skip_top_level_196: bool) =
    true
  
  val default_initial_assumption (temp___expr_195: int) (temp___skip_top_level_196: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_195 : int))
                   (temp___skip_top_level_196 : bool)) }
end

module Spacestation__modulestack___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  
  predicate dynamic_invariant (temp___expr_201: Array__Int__Spacestation__module.map) (temp___is_init_197: bool) (temp___skip_constant_198: bool) (temp___do_toplevel_199: bool) (temp___do_typ_inv_200: bool) =
    true
  
  val dynamic_invariant (temp___expr_201: Array__Int__Spacestation__module.map) (temp___is_init_197: bool) (temp___skip_constant_198: bool) (temp___do_toplevel_199: bool) (temp___do_typ_inv_200: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_201 :
                          Array__Int__Spacestation__module.map))
                      (temp___is_init_197 : bool))
                     (temp___skip_constant_198 : bool))
                    (temp___do_toplevel_199 : bool))
                   (temp___do_typ_inv_200 : bool)) }
  
  predicate default_initial_assumption (temp___expr_203: Array__Int__Spacestation__module.map) (temp___skip_top_level_204: bool) =
    true
  
  val default_initial_assumption (temp___expr_203: Array__Int__Spacestation__module.map) (temp___skip_top_level_204: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_203 : Array__Int__Spacestation__module.map))
                   (temp___skip_top_level_204 : bool)) }
end

module Spacestation__solaris___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacestation__pushmodule__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Spacestation__solaris as Spacestation__solaris
  use Spacestation__monitoringstation as Spacestation__monitoringstation
  use Spacestation__monitoringstation___axiom as Spacestation__monitoringstation___axiom
  use Spacestation__airlockinvariant as Spacestation__airlockinvariant
  use Spacestation__airlockinvariant___axiom as Spacestation__airlockinvariant___axiom
  use Spacestation__orbitheightinvariant as Spacestation__orbitheightinvariant
  use Spacestation__orbitheightinvariant___axiom as Spacestation__orbitheightinvariant___axiom
  use Spacestation__full as Spacestation__full
  use Spacestation__full___axiom as Spacestation__full___axiom
  use Spacestation__pushmodule__newmodule as Spacestation__pushmodule__newmodule
  use Spacestation__module as Spacestation__module
  use Spacestation__module___axiom as Spacestation__module___axiom
  use Spacestation__module__rep as Spacestation__module__rep
  use Spacestation__modulerange as Spacestation__modulerange
  use Spacestation__modulerange__rep as Spacestation__modulerange__rep
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  use Array__Int__Spacestation__module as Array__Int__Spacestation__module
  use Spacestation__pushmodule__newmodule___axiom as Spacestation__pushmodule__newmodule___axiom
  use Spacestation__airlockstatus___axiom as Spacestation__airlockstatus___axiom
  use Spacestation__orbitheight___axiom as Spacestation__orbitheight___axiom
  use Spacestation__module___axiom as Spacestation__module___axiom
  use Spacestation__modulerange___axiom as Spacestation__modulerange___axiom
  use Spacestation__modulestack___axiom as Spacestation__modulestack___axiom
  use Spacestation__monitoringstation___axiom as Spacestation__monitoringstation___axiom
  use Spacestation__solaris___axiom as Spacestation__solaris___axiom
  use Spacestation__airlockinvariant___axiom as Spacestation__airlockinvariant___axiom
  use Spacestation__orbitheightinvariant___axiom as Spacestation__orbitheightinvariant___axiom
  use Spacestation__full___axiom as Spacestation__full___axiom
  
  let def (__void_param : unit)
    requires { [#"spacestation.ads" 92 0 0] true }
    ensures { [#"spacestation.ads" 92 0 0]
              [#"spacestation.ads" 97 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:spacestation.ads:97:14]
              [@model_vc_post]
              [@comment:     Post => solaris.modulesCount = solaris.modulesCount'Old + 1              ^ spacestation.ads:97:14:VC_POSTCONDITION]
              [@GP_Shape:pragargs__and]
              [@GP_Id:9]
              ((([@GP_Sloc:spacestation.ads:97:14]
                 [@GP_Pretty_Ada:1503]
                 ((Spacestation__modulerange__rep.to_rep
                     ((Spacestation__monitoringstation.__split_fields
                          { Spacestation__monitoringstation.__split_fields =
                              (Spacestation__monitoringstation.__split_fields__content
                                  Spacestation__solaris.solaris__split_fields) }).
                        Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
                    = ((Spacestation__modulerange__rep.to_rep
                          (old ((Spacestation__monitoringstation.__split_fields
                                    { Spacestation__monitoringstation.__split_fields =
                                        (Spacestation__monitoringstation.__split_fields__content
                                            Spacestation__solaris.solaris__split_fields) }).
                                  Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount)))
                         + (1 : int)))) /\
                  ([@GP_Pretty_Ada:1510]
                   [@GP_Sloc:spacestation.ads:98:10]
                   ((epsilon temp___result_392: bool.
                       ((temp___result_392
                           = (Spacestation__airlockinvariant.airlockinvariant
                                (Spacestation__monitoringstation.__split_fields__content
                                    Spacestation__solaris.solaris__split_fields))) /\
                          ((Spacestation__airlockinvariant.airlockinvariant__function_guard
                              temp___result_392)
                             (Spacestation__monitoringstation.__split_fields__content
                                 Spacestation__solaris.solaris__split_fields))))
                      = True))) /\
                 ([@GP_Pretty_Ada:1512]
                  [@GP_Sloc:spacestation.ads:99:10]
                  ((epsilon temp___result_393: bool.
                      ((temp___result_393
                          = (Spacestation__orbitheightinvariant.orbitheightinvariant
                               (Spacestation__monitoringstation.__split_fields__content
                                   Spacestation__solaris.solaris__split_fields))) /\
                         ((Spacestation__orbitheightinvariant.orbitheightinvariant__function_guard
                             temp___result_393)
                            (Spacestation__monitoringstation.__split_fields__content
                                Spacestation__solaris.solaris__split_fields))))
                     = True))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram spacestation.ads:92]
      ());
     assume {
       ((((Spacestation__monitoringstation___axiom.dynamic_invariant
             { Spacestation__monitoringstation.__split_fields =
                 (Spacestation__monitoringstation.__split_fields__content
                     Spacestation__solaris.solaris__split_fields) })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram spacestation.ads:92]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram spacestation.ads:92]
      ());
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               ((Boolean.andb (not (Spacestation__full___axiom.full ())))
                  (Spacestation__airlockinvariant___axiom.airlockinvariant ())))
              (Spacestation__orbitheightinvariant___axiom.orbitheightinvariant
                 ()) in
          () in
        ()
      end);
     ([@GNAT-comment:Assume Pre of the subprogram spacestation.ads:92] ());
     assume {
       ((([@GP_Pretty_Ada:1490]
          (not ((epsilon temp___result_389: bool.
                   ((temp___result_389
                       = (Spacestation__full.full
                            (Spacestation__monitoringstation.__split_fields__content
                                Spacestation__solaris.solaris__split_fields))) /\
                      ((Spacestation__full.full__function_guard
                          temp___result_389)
                         (Spacestation__monitoringstation.__split_fields__content
                             Spacestation__solaris.solaris__split_fields))))
                  = True))) /\
           ([@GP_Pretty_Ada:1492]
            ((epsilon temp___result_390: bool.
                ((temp___result_390
                    = (Spacestation__airlockinvariant.airlockinvariant
                         (Spacestation__monitoringstation.__split_fields__content
                             Spacestation__solaris.solaris__split_fields))) /\
                   ((Spacestation__airlockinvariant.airlockinvariant__function_guard
                       temp___result_390)
                      (Spacestation__monitoringstation.__split_fields__content
                          Spacestation__solaris.solaris__split_fields))))
               = True))) /\
          ([@GP_Pretty_Ada:1494]
           ((epsilon temp___result_391: bool.
               ((temp___result_391
                   = (Spacestation__orbitheightinvariant.orbitheightinvariant
                        (Spacestation__monitoringstation.__split_fields__content
                            Spacestation__solaris.solaris__split_fields))) /\
                  ((Spacestation__orbitheightinvariant.orbitheightinvariant__function_guard
                      temp___result_391)
                     (Spacestation__monitoringstation.__split_fields__content
                         Spacestation__solaris.solaris__split_fields))))
              = True))) };
     (let temp___old_387 =
        Spacestation__modulerange__rep.to_rep
          ((Spacestation__monitoringstation.__split_fields
               { Spacestation__monitoringstation.__split_fields =
                   (Spacestation__monitoringstation.__split_fields__content
                       Spacestation__solaris.solaris__split_fields) }).
             Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount) in
      (try
         ([#"spacestation.adb" 41 0 0]
          (([#"spacestation.adb" 41 0 0]
            (Spacestation__pushmodule__newmodule.newmodule.int__content <-
               (0 : int)));
           ([#"spacestation.adb" 41 0 0]
            assume {
              [#"spacestation.adb" 41 0 0]
              (((((Spacestation__module___axiom.dynamic_invariant
                     (Spacestation__pushmodule__newmodule.newmodule.int__content))
                    True)
                   False)
                  True)
                 True) })));
         ([@GP_Sloc:spacestation.adb:43:7] [#"spacestation.adb" 43 0 0] ());
         ([@GP_Sloc:spacestation.adb:43:31] [#"spacestation.adb" 43 0 0] ());
         ([@GP_Sloc:spacestation.adb:43:28]
          [#"spacestation.adb" 43 0 0]
          (let temp___381 =
             let temp___380 =
               { Spacestation__monitoringstation.__split_fields =
                   (Spacestation__monitoringstation.__split_fields__content
                       Spacestation__solaris.solaris__split_fields) } in
             ([#"spacestation.adb" 43 0 0]
              (begin
                 ensures { true }
                 let _ =
                   let _ =
                     (Spacestation__monitoringstation.__split_fields
                         temp___380).Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount in
                   () in
                 ()
               end));
             ({ temp___380 with
                Spacestation__monitoringstation.__split_fields =
                  ({ (Spacestation__monitoringstation.__split_fields
                         temp___380) with
                     Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount =
                       (Spacestation__modulerange__rep.of_rep
                          ([#"spacestation.adb" 43 0 0]
                           [@comment:      solaris.modulesCount := solaris.modulesCount + 1;                                                    ^ spacestation.adb:43:52:VC_RANGE_CHECK]
                           [@vc:annotation]
                           [@GP_Shape:solaris_assign__add]
                           [@GP_Sloc:spacestation.adb:43:52]
                           [@GP_Reason:VC_RANGE_CHECK]
                           [@GP_Id:8]
                           (Spacestation__modulerange.range_check_
                              ((Spacestation__modulerange__rep.to_rep
                                  ((Spacestation__monitoringstation.__split_fields
                                       { Spacestation__monitoringstation.__split_fields =
                                           (Spacestation__monitoringstation.__split_fields__content
                                               Spacestation__solaris.solaris__split_fields) }).
                                     Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
                                 + (1 : int))))) }) }) in
           Spacestation__solaris.solaris__split_fields.Spacestation__monitoringstation.__split_fields__content <-
             (Spacestation__monitoringstation.__split_fields temp___381)));
         ([@GP_Sloc:spacestation.adb:44:7] [#"spacestation.adb" 44 0 0] ());
         ([@GP_Sloc:spacestation.adb:44:24] [#"spacestation.adb" 44 0 0] ());
         ([@GP_Sloc:spacestation.adb:44:49] [#"spacestation.adb" 44 0 0] ());
         ([@GP_Sloc:spacestation.adb:44:46]
          [#"spacestation.adb" 44 0 0]
          (let temp___385 =
             let temp___384 =
               { Spacestation__monitoringstation.__split_fields =
                   (Spacestation__monitoringstation.__split_fields__content
                       Spacestation__solaris.solaris__split_fields) } in
             ([#"spacestation.adb" 44 0 0]
              (begin
                 ensures { true }
                 let _ =
                   let _ =
                     (Spacestation__monitoringstation.__split_fields
                         temp___384).Spacestation__monitoringstation.rec__spacestation__monitoringstation__modules in
                   () in
                 ()
               end));
             ({ temp___384 with
                Spacestation__monitoringstation.__split_fields =
                  ({ (Spacestation__monitoringstation.__split_fields
                         temp___384) with
                     Spacestation__monitoringstation.rec__spacestation__monitoringstation__modules =
                       (let temp___383 =
                          (Spacestation__monitoringstation.__split_fields
                              { Spacestation__monitoringstation.__split_fields =
                                  (Spacestation__monitoringstation.__split_fields__content
                                      Spacestation__solaris.solaris__split_fields) }).
                            Spacestation__monitoringstation.rec__spacestation__monitoringstation__modules in
                        ((Array__Int__Spacestation__module.set
                            ((Spacestation__monitoringstation.__split_fields
                                 { Spacestation__monitoringstation.__split_fields =
                                     (Spacestation__monitoringstation.__split_fields__content
                                         Spacestation__solaris.solaris__split_fields) }).
                               Spacestation__monitoringstation.rec__spacestation__monitoringstation__modules))
                           (Spacestation__modulerange__rep.to_rep
                              ((Spacestation__monitoringstation.__split_fields
                                   { Spacestation__monitoringstation.__split_fields =
                                       (Spacestation__monitoringstation.__split_fields__content
                                           Spacestation__solaris.solaris__split_fields) }).
                                 Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount)))
                          (Spacestation__module__rep.of_rep
                             (Spacestation__pushmodule__newmodule.newmodule.int__content))) }) }) in
           [#"spacestation.adb" 44 0 0]
           (Spacestation__solaris.solaris__split_fields.Spacestation__monitoringstation.__split_fields__content <-
              (Spacestation__monitoringstation.__split_fields temp___385))));
         (raise Return__exc)
       with Return__exc -> ()
       end);
      (begin
         ensures { true }
         let _ =
           let _ =
             (Boolean.andb
                ((Boolean.andb
                    ((Spacestation__modulerange__rep.to_rep
                        ((Spacestation__monitoringstation.__split_fields
                             { Spacestation__monitoringstation.__split_fields =
                                 (Spacestation__monitoringstation.__split_fields__content
                                     Spacestation__solaris.solaris__split_fields) }).
                           Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
                       = (temp___old_387 + (1 : int))))
                   (Spacestation__airlockinvariant___axiom.airlockinvariant
                      ())))
               (Spacestation__orbitheightinvariant___axiom.orbitheightinvariant
                  ()) in
           () in
         ()
       end)))
end
