(* Module for axiomatizing type "airlockstatus" defined at spacestation.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__airlockstatus
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type airlockstatus  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = airlockstatus,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type airlockstatus__ref  = { mutable airlockstatus__content : airlockstatus }
  
  function   airlockstatus__ref_airlockstatus__content__projection
    (a : airlockstatus__ref) requires {  } ensures  {  } returns
    airlockstatus = a.airlockstatus__content
  
  meta model_projection function airlockstatus__ref_airlockstatus__content__projection
  
  meta inline:no function airlockstatus__ref_airlockstatus__content__projection
  
  function   airlockstatus__havoc (x : airlockstatus__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "airlockstatus" defined at spacestation.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__airlockstatus__rep
  
  use        Spacestation__airlockstatus
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Spacestation__airlockstatus.airlockstatus,
    predicate in_range = Spacestation__airlockstatus.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "orbitheight" defined at spacestation.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__orbitheight
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type orbitheight  = <range 300 450>
  
  function   first () requires { True } ensures  { True } returns int = 300
  
  function   last () requires { True } ensures  { True } returns int = 450
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = orbitheight,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type orbitheight__ref  = { mutable orbitheight__content : orbitheight }
  
  function   orbitheight__ref_orbitheight__content__projection
    (a : orbitheight__ref) requires {  } ensures  {  } returns
    orbitheight = a.orbitheight__content
  
  meta model_projection function orbitheight__ref_orbitheight__content__projection
  
  meta inline:no function orbitheight__ref_orbitheight__content__projection
  
  function   orbitheight__havoc (x : orbitheight__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "orbitheight" defined at spacestation.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__orbitheight__rep
  
  use        Spacestation__orbitheight
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Spacestation__orbitheight.orbitheight) requires
    { True } ensures  { True } returns
    int = (Spacestation__orbitheight.orbitheight'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Spacestation__orbitheight.orbitheight,
    predicate in_range = Spacestation__orbitheight.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "modulerange" defined at spacestation.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__modulerange
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type modulerange  = <range 0 20>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 20
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = modulerange,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type modulerange__ref  = { mutable modulerange__content : modulerange }
  
  function   modulerange__ref_modulerange__content__projection
    (a : modulerange__ref) requires {  } ensures  {  } returns
    modulerange = a.modulerange__content
  
  meta model_projection function modulerange__ref_modulerange__content__projection
  
  meta inline:no function modulerange__ref_modulerange__content__projection
  
  function   modulerange__havoc (x : modulerange__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "modulerange" defined at spacestation.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__modulerange__rep
  
  use        Spacestation__modulerange
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Spacestation__modulerange.modulerange) requires
    { True } ensures  { True } returns
    int = (Spacestation__modulerange.modulerange'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Spacestation__modulerange.modulerange,
    predicate in_range = Spacestation__modulerange.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "module" defined at spacestation.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__module
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type module__  = <range 0 3>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 3
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = module__,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type module____ref  = { mutable module____content : module__ }
  
  function   module____ref_module____content__projection (a : module____ref)
    requires {  } ensures  {  } returns module__ = a.module____content
  
  meta model_projection function module____ref_module____content__projection
  
  meta inline:no function module____ref_module____content__projection
  
  function   module____havoc (x : module____ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "module" defined at spacestation.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__module__rep
  
  use        Spacestation__module
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Spacestation__module.module__) requires { True }
    ensures  { True } returns int = (Spacestation__module.module__'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Spacestation__module.module__,
    predicate in_range = Spacestation__module.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "TmodulestackB" defined at spacestation.ads:7, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Spacestation__module
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__module
  use        Spacestation__module__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing type "modulestack" defined at spacestation.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__modulestack
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__module
  use        Array__Int__Spacestation__module
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   first () requires {  } ensures  {  } returns int = 0
  
  function   last () requires {  } ensures  {  } returns int = 20
  
  clone export ada__model.Constr_Array with axiom . type map = Array__Int__Spacestation__module.map,
    function array_bool_eq = Array__Int__Spacestation__module.bool_eq,
    function first = first, function last = last, type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "monitoringstation" defined at spacestation.ads:10, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spacestation__monitoringstation__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Spacestation__airlockstatus
  use        Spacestation__airlockstatus__rep
  use        Spacestation__orbitheight
  use        Spacestation__orbitheight__rep
  use        Spacestation__modulerange
  use        Spacestation__modulerange__rep
  use        Spacestation__modulestack
  use        Array__Int__Spacestation__module
  use        Array__Int__Spacestation__module
  use        Array__Int__Spacestation__module
  use        Array__Int__Spacestation__module
  
  type __split_fields  = { [model_trace:.1068]
                           [name:airLock1]rec__spacestation__monitoringstation__airlock1 : Spacestation__airlockstatus.airlockstatus;
                           [model_trace:.1074]
                           [name:airLock2]rec__spacestation__monitoringstation__airlock2 : Spacestation__airlockstatus.airlockstatus;
                           [model_trace:.1079]
                           [name:height]rec__spacestation__monitoringstation__height : Spacestation__orbitheight.orbitheight;
                           [name:modules]
                           [model_trace:.1084]rec__spacestation__monitoringstation__modules : Array__Int__Spacestation__module.map;
                           [name:modulesCount]
                           [model_trace:.1088]rec__spacestation__monitoringstation__modulescount : Spacestation__modulerange.modulerange }
  
  function [model_trace:.1068] [name:airLock1] 
    __split_fields_rec__spacestation__monitoringstation__airlock1__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Spacestation__airlockstatus.airlockstatus = a.rec__spacestation__monitoringstation__airlock1
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__airlock1__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__airlock1__projection
  
  function [model_trace:.1074] [name:airLock2] 
    __split_fields_rec__spacestation__monitoringstation__airlock2__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Spacestation__airlockstatus.airlockstatus = a.rec__spacestation__monitoringstation__airlock2
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__airlock2__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__airlock2__projection
  
  function [model_trace:.1079] [name:height] 
    __split_fields_rec__spacestation__monitoringstation__height__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Spacestation__orbitheight.orbitheight = a.rec__spacestation__monitoringstation__height
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__height__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__height__projection
  
  function [name:modules] [model_trace:.1084] 
    __split_fields_rec__spacestation__monitoringstation__modules__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Array__Int__Spacestation__module.map = a.rec__spacestation__monitoringstation__modules
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__modules__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__modules__projection
  
  function [name:modulesCount] [model_trace:.1088] 
    __split_fields_rec__spacestation__monitoringstation__modulescount__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Spacestation__modulerange.modulerange = a.rec__spacestation__monitoringstation__modulescount
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__modulescount__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__modulescount__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   spacestation__monitoringstation__airlock1__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__airlock1_ (a : __rep)
    requires { (spacestation__monitoringstation__airlock1__pred a) } ensures 
    { (result
         = a.__split_fields.rec__spacestation__monitoringstation__airlock1) }
    returns Spacestation__airlockstatus.airlockstatus
  
  function   spacestation__monitoringstation__airlock2__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__airlock2_ (a : __rep)
    requires { (spacestation__monitoringstation__airlock2__pred a) } ensures 
    { (result
         = a.__split_fields.rec__spacestation__monitoringstation__airlock2) }
    returns Spacestation__airlockstatus.airlockstatus
  
  function   spacestation__monitoringstation__height__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__height_ (a : __rep)
    requires { (spacestation__monitoringstation__height__pred a) } ensures 
    { (result = a.__split_fields.rec__spacestation__monitoringstation__height) }
    returns Spacestation__orbitheight.orbitheight
  
  function   spacestation__monitoringstation__modules__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__modules_ (a : __rep)
    requires { (spacestation__monitoringstation__modules__pred a) } ensures 
    { (result
         = a.__split_fields.rec__spacestation__monitoringstation__modules) }
    returns Array__Int__Spacestation__module.map
  
  function   spacestation__monitoringstation__modulescount__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__modulescount_ (a : __rep)
    requires { (spacestation__monitoringstation__modulescount__pred a) }
    ensures 
    { (result
         = a.__split_fields.rec__spacestation__monitoringstation__modulescount) }
    returns Spacestation__modulerange.modulerange
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Spacestation__airlockstatus__rep.to_rep
                a.__split_fields.rec__spacestation__monitoringstation__airlock1)
               = (Spacestation__airlockstatus__rep.to_rep
                    b.__split_fields.rec__spacestation__monitoringstation__airlock1))
              /\
              ((Spacestation__airlockstatus__rep.to_rep
                  a.__split_fields.rec__spacestation__monitoringstation__airlock2)
                 = (Spacestation__airlockstatus__rep.to_rep
                      b.__split_fields.rec__spacestation__monitoringstation__airlock2))
              /\
              ((Spacestation__orbitheight__rep.to_rep
                  a.__split_fields.rec__spacestation__monitoringstation__height)
                 = (Spacestation__orbitheight__rep.to_rep
                      b.__split_fields.rec__spacestation__monitoringstation__height))
              /\
              (Spacestation__modulestack.bool_eq
                 a.__split_fields.rec__spacestation__monitoringstation__modules
                 b.__split_fields.rec__spacestation__monitoringstation__modules)
              /\
              ((Spacestation__modulerange__rep.to_rep
                  a.__split_fields.rec__spacestation__monitoringstation__modulescount)
                 = (Spacestation__modulerange__rep.to_rep
                      b.__split_fields.rec__spacestation__monitoringstation__modulescount)))
           then True  else False)

end

(* Module for axiomatizing type "monitoringstation" defined at spacestation.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__monitoringstation
  
  use export Spacestation__monitoringstation__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type monitoringstation  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   spacestation__monitoringstation__airlock1__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock1__last__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock1__position () requires
    {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__airlock1__first__bit_axiom : 
  ((spacestation__monitoringstation__airlock1__first__bit ) >= 0)
  
  axiom spacestation__monitoringstation__airlock1__last__bit_axiom : 
  ((spacestation__monitoringstation__airlock1__last__bit )
     > (spacestation__monitoringstation__airlock1__first__bit ))
  
  axiom spacestation__monitoringstation__airlock1__position_axiom : ((spacestation__monitoringstation__airlock1__position
                                                                    ) >= 0)
  
  function   spacestation__monitoringstation__airlock2__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock2__last__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock2__position () requires
    {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__airlock2__first__bit_axiom : 
  ((spacestation__monitoringstation__airlock2__first__bit ) >= 0)
  
  axiom spacestation__monitoringstation__airlock2__last__bit_axiom : 
  ((spacestation__monitoringstation__airlock2__last__bit )
     > (spacestation__monitoringstation__airlock2__first__bit ))
  
  axiom spacestation__monitoringstation__airlock2__position_axiom : ((spacestation__monitoringstation__airlock2__position
                                                                    ) >= 0)
  
  function   spacestation__monitoringstation__height__first__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__height__last__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__height__position () requires
    {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__height__first__bit_axiom : ((spacestation__monitoringstation__height__first__bit
                                                                    ) >= 0)
  
  axiom spacestation__monitoringstation__height__last__bit_axiom : ((spacestation__monitoringstation__height__last__bit
                                                                    )
                                                                    > (
                                                                    spacestation__monitoringstation__height__first__bit
                                                                    ))
  
  axiom spacestation__monitoringstation__height__position_axiom : ((spacestation__monitoringstation__height__position
                                                                    ) >= 0)
  
  function   spacestation__monitoringstation__modules__first__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__modules__last__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__modules__position () requires
    {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__modules__first__bit_axiom : 
  ((spacestation__monitoringstation__modules__first__bit ) >= 0)
  
  axiom spacestation__monitoringstation__modules__last__bit_axiom : ((spacestation__monitoringstation__modules__last__bit
                                                                    )
                                                                    > (spacestation__monitoringstation__modules__first__bit
                                                                    ))
  
  axiom spacestation__monitoringstation__modules__position_axiom : ((spacestation__monitoringstation__modules__position
                                                                    ) >= 0)
  
  function   spacestation__monitoringstation__modulescount__first__bit 
    () requires {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__modulescount__last__bit 
    () requires {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__modulescount__position 
    () requires {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__modulescount__first__bit_axiom : 
  ((spacestation__monitoringstation__modulescount__first__bit ) >= 0)
  
  axiom spacestation__monitoringstation__modulescount__last__bit_axiom : 
  ((spacestation__monitoringstation__modulescount__last__bit )
     > (spacestation__monitoringstation__modulescount__first__bit ))
  
  axiom spacestation__monitoringstation__modulescount__position_axiom : 
  ((spacestation__monitoringstation__modulescount__position ) >= 0)
  
  function   user_eq (a : monitoringstation b : monitoringstation) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns monitoringstation
  
  type monitoringstation__ref  = { mutable monitoringstation__content : monitoringstation }
  
  function   monitoringstation__ref_monitoringstation__content__projection
    (a : monitoringstation__ref) requires {  } ensures  {  } returns
    monitoringstation = a.monitoringstation__content
  
  meta model_projection function monitoringstation__ref_monitoringstation__content__projection
  
  meta inline:no function monitoringstation__ref_monitoringstation__content__projection
  
  function   monitoringstation__havoc (x : monitoringstation__ref) requires
    {  } ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "solaris" defined at spacestation.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Spacestation__solaris
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Spacestation__monitoringstation
  
  val solaris__split_fields [name:solaris] [model_projected]
  [model_trace:1095] [sloc:spacestation.ads:18]: Spacestation__monitoringstation.__split_fields

end

(* Module giving axioms for type "monitoringstation" defined at spacestation.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__monitoringstation___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__monitoringstation
  use        Spacestation__airlockstatus
  use        Spacestation__airlockstatus__rep
  use        Spacestation__orbitheight
  use        Spacestation__orbitheight__rep
  use        Spacestation__modulerange
  use        Spacestation__modulerange__rep
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_217) : Spacestation__monitoringstation.monitoringstation
    ([mlw:proxy_symbol] [introduced] temp___is_init_213) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_214) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_215) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_216) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_219) : Spacestation__monitoringstation.monitoringstation
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_220) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Spacestation__monitoringstation.spacestation__monitoringstation__airlock1__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_219))
        then
        (( (Spacestation__airlockstatus__rep.to_rep ([mlw:proxy_symbol]
              [introduced] temp___expr_219).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock1))
           = ( 1))
        ) /\
          (if
          (Spacestation__monitoringstation.spacestation__monitoringstation__airlock2__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_219))
          then
          (( (Spacestation__airlockstatus__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_219).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock2))
             = ( 1))
          ) /\
          (if
          (Spacestation__monitoringstation.spacestation__monitoringstation__height__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_219))
          then
          (( (Spacestation__orbitheight__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_219).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height))
             = ( 400))
          ) /\
          (if
          (Spacestation__monitoringstation.spacestation__monitoringstation__modulescount__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_219))
          then
          (( (Spacestation__modulerange__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_219).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
             = ( 0))
          ))

end

(* Module for possibly declaring a logic function for "full" defined at spacestation.ads:91, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spacestation__full
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Spacestation__monitoringstation
  
  function   full
    (Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   full__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_166) : bool
    Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "full" defined at spacestation.ads:91, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spacestation__full___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__solaris
  use        Spacestation__monitoringstation
  use        Spacestation__monitoringstation___axiom
  use        Spacestation__full
  use        Spacestation__modulerange
  use        Spacestation__modulerange__rep
  
  function   full (__void_param : unit) requires { True } ensures 
    { ((result
          = (Spacestation__full.full
               !Spacestation__solaris.solaris__split_fields)) /\
         (Spacestation__full.full__function_guard result
            !Spacestation__solaris.solaris__split_fields) /\
         (result
            = ((Spacestation__modulerange__rep.to_rep
                  ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount)
                 = 20))) } returns bool
  
  axiom full__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom full__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "newmodule" defined at spacestation.adb:34, created in Gnat2Why.Decls.Translate_Variable *)
module Spacestation__pushmodule__newmodule
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val newmodule [model_trace:898] [model_projected]
  [name:newModule] [sloc:spacestation.adb:34]: int

end

(* Module giving axioms for type "module" defined at spacestation.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__module___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__module
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_186) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_182) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_183) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_184) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_185) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_182) = True) \/
          (Spacestation__module.first <= Spacestation__module.last))
       then
       (Spacestation__module.dynamic_property Spacestation__module.first
          Spacestation__module.last ([mlw:proxy_symbol]
          [introduced] temp___expr_186))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_187) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_188) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "newmodule" defined at spacestation.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spacestation__pushmodule__newmodule___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "airlockstatus" defined at spacestation.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__airlockstatus___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__airlockstatus
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_172) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_168) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_171) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_168) = True) \/
          (Spacestation__airlockstatus.first
             <= Spacestation__airlockstatus.last))
       then
       (Spacestation__airlockstatus.dynamic_property
          Spacestation__airlockstatus.first Spacestation__airlockstatus.last
          ([mlw:proxy_symbol] [introduced] temp___expr_172))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_173) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_174) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "orbitheight" defined at spacestation.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__orbitheight___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__orbitheight
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_179) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_175) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_176) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_178) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_175) = True) \/
          (Spacestation__orbitheight.first <= Spacestation__orbitheight.last))
       then
       (Spacestation__orbitheight.dynamic_property
          Spacestation__orbitheight.first Spacestation__orbitheight.last
          ([mlw:proxy_symbol] [introduced] temp___expr_179))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_180) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_181) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "modulerange" defined at spacestation.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__modulerange___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__modulerange
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_193) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_189) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_190) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_191) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_192) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_189) = True) \/
          (Spacestation__modulerange.first <= Spacestation__modulerange.last))
       then
       (Spacestation__modulerange.dynamic_property
          Spacestation__modulerange.first Spacestation__modulerange.last
          ([mlw:proxy_symbol] [introduced] temp___expr_193))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_194) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_195) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "modulestack" defined at spacestation.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__modulestack___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Array__Int__Spacestation__module
  use        Array__Int__Spacestation__module
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_200) : Array__Int__Spacestation__module.map
    ([mlw:proxy_symbol] [introduced] temp___is_init_196) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_197) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_198) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_199) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_202) : Array__Int__Spacestation__module.map
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_203) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "solaris" defined at spacestation.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spacestation__solaris___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "pushmodule" defined at spacestation.ads:93, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spacestation__pushmodule__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__solaris
  use        Spacestation__monitoringstation
  use        Spacestation__monitoringstation___axiom
  use        Spacestation__full
  use        Spacestation__full___axiom
  use        Spacestation__pushmodule__newmodule
  use        Spacestation__module
  use        Spacestation__module___axiom
  use        Spacestation__module__rep
  use        Spacestation__modulerange
  use        Spacestation__modulerange__rep
  use        Array__Int__Spacestation__module
  use        Array__Int__Spacestation__module
  use        Array__Int__Spacestation__module
  use        Spacestation__pushmodule__newmodule___axiom
  use        Spacestation__airlockstatus___axiom
  use        Spacestation__orbitheight___axiom
  use        Spacestation__module___axiom
  use        Spacestation__modulerange___axiom
  use        Spacestation__modulestack___axiom
  use        Spacestation__monitoringstation___axiom
  use        Spacestation__solaris___axiom
  use        Spacestation__full___axiom
  
  function [GP_Subp:spacestation.ads:93] [sloc:spacestation.ads:93] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:spacestation.ads:96] ([GP_Reason:VC_POSTCONDITION]
                                  [GP_Shape:pragargs__cmp]
                                  [comment:     Post => solaris.modulesCount = solaris.modulesCount'Old + 1;              ^ spacestation.ads:96:14:VC_POSTCONDITION]
                                  [model_vc_post]
                                  [GP_Sloc:spacestation.ads:96:14]
                                  [GP_Id:9] ([GP_Pretty_Ada:1841]
                                            [GP_Sloc:spacestation.ads:96:14] (
                                            (Spacestation__modulerange__rep.to_rep
                                               ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount)
                                              = ((Spacestation__modulerange__rep.to_rep
                                                    --pp_tagged NOT IMPLEMENTED)
                                                   + 1))))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram spacestation.ads:93 *);
        assume
        { (Spacestation__monitoringstation___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram spacestation.ads:93 *);
        (* Check for RTE in the Pre of the subprogram spacestation.ads:93 *);
        abstract ensures
        { True } begin  (let _ = --pp_not NOT IMPLEMENTED in ())  end;
        (* Assume Pre of the subprogram spacestation.ads:93 *);
        assume
        { ([GP_Pretty_Ada:1824] --pp_not NOT IMPLEMENTED) };
        (let ([mlw:proxy_symbol] [introduced] temp___old_355) =
        ( (Spacestation__modulerange__rep.to_rep
             ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount))
        in (try
        ();
          ([sloc:spacestation.adb:34] (
          Spacestation__pushmodule__newmodule.newmodule := ( 0));
          assume
          { (Spacestation__module___axiom.dynamic_invariant
               !Spacestation__pushmodule__newmodule.newmodule True False True
               True) });
          ();
          ([GP_Sloc:spacestation.adb:36:7] ([sloc:spacestation.adb:36] ()));
          ([GP_Sloc:spacestation.adb:36:31] ([sloc:spacestation.adb:36] ()));
          ([GP_Sloc:spacestation.adb:36:28] ([sloc:spacestation.adb:36] (let ([mlw:proxy_symbol]
                                            [introduced] temp___349) =
                                            (let ([mlw:proxy_symbol]
                                              [introduced] temp___348) =
                                              ( --pp_record_aggregate NOT IMPLEMENTED)
                                              in abstract ensures
                                              { True } begin  (let _ =
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___348).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount
                                                             in ())  end;
                                              --pp_record_update NOT IMPLEMENTED)
                                            in (
                                            Spacestation__solaris.solaris__split_fields
                                            :=
                                            ([mlw:proxy_symbol]
                                              [introduced] temp___349).Spacestation__monitoringstation.__split_fields))));
          ([GP_Sloc:spacestation.adb:37:7] ([sloc:spacestation.adb:37] ()));
          ([GP_Sloc:spacestation.adb:37:24] ([sloc:spacestation.adb:37] ()));
          ([GP_Sloc:spacestation.adb:37:49] ([sloc:spacestation.adb:37] ()));
          ([GP_Sloc:spacestation.adb:37:46] ([sloc:spacestation.adb:37] (let ([mlw:proxy_symbol]
                                            [introduced] temp___353) =
                                            (let ([mlw:proxy_symbol]
                                              [introduced] temp___352) =
                                              ( --pp_record_aggregate NOT IMPLEMENTED)
                                              in abstract ensures
                                              { True } begin  (let _ =
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___352).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__modules
                                                             in ())  end;
                                              --pp_record_update NOT IMPLEMENTED)
                                            in (
                                            Spacestation__solaris.solaris__split_fields
                                            :=
                                            ([mlw:proxy_symbol]
                                              [introduced] temp___353).Spacestation__monitoringstation.__split_fields))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((Spacestation__modulerange__rep.to_rep
                           ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__modulescount)
                          = (([mlw:proxy_symbol] [introduced] temp___old_355)
                               + 1))
                       in ())  end)

end
