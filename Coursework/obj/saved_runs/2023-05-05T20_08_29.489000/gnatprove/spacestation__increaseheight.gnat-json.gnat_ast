(* Module for axiomatizing type "airlockstatus" defined at spacestation.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__airlockstatus
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type airlockstatus  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = airlockstatus,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type airlockstatus__ref  = { mutable airlockstatus__content : airlockstatus }
  
  function   airlockstatus__ref_airlockstatus__content__projection
    (a : airlockstatus__ref) requires {  } ensures  {  } returns
    airlockstatus = a.airlockstatus__content
  
  meta model_projection function airlockstatus__ref_airlockstatus__content__projection
  
  meta inline:no function airlockstatus__ref_airlockstatus__content__projection
  
  function   airlockstatus__havoc (x : airlockstatus__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "airlockstatus" defined at spacestation.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__airlockstatus__rep
  
  use        Spacestation__airlockstatus
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Spacestation__airlockstatus.airlockstatus,
    predicate in_range = Spacestation__airlockstatus.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "orbitheight" defined at spacestation.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__orbitheight
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type orbitheight  = <range 300 450>
  
  function   first () requires { True } ensures  { True } returns int = 300
  
  function   last () requires { True } ensures  { True } returns int = 450
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = orbitheight,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type orbitheight__ref  = { mutable orbitheight__content : orbitheight }
  
  function   orbitheight__ref_orbitheight__content__projection
    (a : orbitheight__ref) requires {  } ensures  {  } returns
    orbitheight = a.orbitheight__content
  
  meta model_projection function orbitheight__ref_orbitheight__content__projection
  
  meta inline:no function orbitheight__ref_orbitheight__content__projection
  
  function   orbitheight__havoc (x : orbitheight__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "orbitheight" defined at spacestation.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__orbitheight__rep
  
  use        Spacestation__orbitheight
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Spacestation__orbitheight.orbitheight) requires
    { True } ensures  { True } returns
    int = (Spacestation__orbitheight.orbitheight'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Spacestation__orbitheight.orbitheight,
    predicate in_range = Spacestation__orbitheight.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "monitoringstation" defined at spacestation.ads:6, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Spacestation__monitoringstation__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Spacestation__airlockstatus
  use        Spacestation__airlockstatus__rep
  use        Spacestation__orbitheight
  use        Spacestation__orbitheight__rep
  
  type __split_fields  = { [model_trace:.923]
                           [name:airLock1]rec__spacestation__monitoringstation__airlock1 : Spacestation__airlockstatus.airlockstatus;
                           [model_trace:.929]
                           [name:airLock2]rec__spacestation__monitoringstation__airlock2 : Spacestation__airlockstatus.airlockstatus;
                           [name:height]
                           [model_trace:.934]rec__spacestation__monitoringstation__height : Spacestation__orbitheight.orbitheight }
  
  function [model_trace:.923] [name:airLock1] 
    __split_fields_rec__spacestation__monitoringstation__airlock1__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Spacestation__airlockstatus.airlockstatus = a.rec__spacestation__monitoringstation__airlock1
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__airlock1__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__airlock1__projection
  
  function [model_trace:.929] [name:airLock2] 
    __split_fields_rec__spacestation__monitoringstation__airlock2__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Spacestation__airlockstatus.airlockstatus = a.rec__spacestation__monitoringstation__airlock2
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__airlock2__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__airlock2__projection
  
  function [name:height] [model_trace:.934] 
    __split_fields_rec__spacestation__monitoringstation__height__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Spacestation__orbitheight.orbitheight = a.rec__spacestation__monitoringstation__height
  
  meta model_projection function __split_fields_rec__spacestation__monitoringstation__height__projection
  
  meta inline:no function __split_fields_rec__spacestation__monitoringstation__height__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   spacestation__monitoringstation__airlock1__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__airlock1_ (a : __rep)
    requires { (spacestation__monitoringstation__airlock1__pred a) } ensures 
    { (result
         = a.__split_fields.rec__spacestation__monitoringstation__airlock1) }
    returns Spacestation__airlockstatus.airlockstatus
  
  function   spacestation__monitoringstation__airlock2__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__airlock2_ (a : __rep)
    requires { (spacestation__monitoringstation__airlock2__pred a) } ensures 
    { (result
         = a.__split_fields.rec__spacestation__monitoringstation__airlock2) }
    returns Spacestation__airlockstatus.airlockstatus
  
  function   spacestation__monitoringstation__height__pred (a : __rep)
    requires { True } ensures  { True } returns  = True
  
  function   rec__spacestation__monitoringstation__height_ (a : __rep)
    requires { (spacestation__monitoringstation__height__pred a) } ensures 
    { (result = a.__split_fields.rec__spacestation__monitoringstation__height) }
    returns Spacestation__orbitheight.orbitheight
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Spacestation__airlockstatus__rep.to_rep
                a.__split_fields.rec__spacestation__monitoringstation__airlock1)
               = (Spacestation__airlockstatus__rep.to_rep
                    b.__split_fields.rec__spacestation__monitoringstation__airlock1))
              /\
              ((Spacestation__airlockstatus__rep.to_rep
                  a.__split_fields.rec__spacestation__monitoringstation__airlock2)
                 = (Spacestation__airlockstatus__rep.to_rep
                      b.__split_fields.rec__spacestation__monitoringstation__airlock2))
              /\
              ((Spacestation__orbitheight__rep.to_rep
                  a.__split_fields.rec__spacestation__monitoringstation__height)
                 = (Spacestation__orbitheight__rep.to_rep
                      b.__split_fields.rec__spacestation__monitoringstation__height)))
           then True  else False)

end

(* Module for axiomatizing type "monitoringstation" defined at spacestation.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Spacestation__monitoringstation
  
  use export Spacestation__monitoringstation__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type monitoringstation  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   spacestation__monitoringstation__airlock1__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock1__last__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock1__position () requires
    {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__airlock1__first__bit_axiom : 
  ((spacestation__monitoringstation__airlock1__first__bit ) >= 0)
  
  axiom spacestation__monitoringstation__airlock1__last__bit_axiom : 
  ((spacestation__monitoringstation__airlock1__last__bit )
     > (spacestation__monitoringstation__airlock1__first__bit ))
  
  axiom spacestation__monitoringstation__airlock1__position_axiom : ((spacestation__monitoringstation__airlock1__position
                                                                    ) >= 0)
  
  function   spacestation__monitoringstation__airlock2__first__bit ()
    requires {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock2__last__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__airlock2__position () requires
    {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__airlock2__first__bit_axiom : 
  ((spacestation__monitoringstation__airlock2__first__bit ) >= 0)
  
  axiom spacestation__monitoringstation__airlock2__last__bit_axiom : 
  ((spacestation__monitoringstation__airlock2__last__bit )
     > (spacestation__monitoringstation__airlock2__first__bit ))
  
  axiom spacestation__monitoringstation__airlock2__position_axiom : ((spacestation__monitoringstation__airlock2__position
                                                                    ) >= 0)
  
  function   spacestation__monitoringstation__height__first__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__height__last__bit () requires
    {  } ensures  {  } returns int
  
  function   spacestation__monitoringstation__height__position () requires
    {  } ensures  {  } returns int
  
  axiom spacestation__monitoringstation__height__first__bit_axiom : ((spacestation__monitoringstation__height__first__bit
                                                                    ) >= 0)
  
  axiom spacestation__monitoringstation__height__last__bit_axiom : ((spacestation__monitoringstation__height__last__bit
                                                                    )
                                                                    > (
                                                                    spacestation__monitoringstation__height__first__bit
                                                                    ))
  
  axiom spacestation__monitoringstation__height__position_axiom : ((spacestation__monitoringstation__height__position
                                                                    ) >= 0)
  
  function   user_eq (a : monitoringstation b : monitoringstation) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns monitoringstation
  
  type monitoringstation__ref  = { mutable monitoringstation__content : monitoringstation }
  
  function   monitoringstation__ref_monitoringstation__content__projection
    (a : monitoringstation__ref) requires {  } ensures  {  } returns
    monitoringstation = a.monitoringstation__content
  
  meta model_projection function monitoringstation__ref_monitoringstation__content__projection
  
  meta inline:no function monitoringstation__ref_monitoringstation__content__projection
  
  function   monitoringstation__havoc (x : monitoringstation__ref) requires
    {  } ensures  {  } returns unit

end

(* Module for defining a ref holding the value of variable "solaris" defined at spacestation.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Spacestation__solaris
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Spacestation__monitoringstation
  
  val solaris__split_fields [name:solaris] [model_projected]
  [model_trace:941] [sloc:spacestation.ads:12]: Spacestation__monitoringstation.__split_fields

end

(* Module giving axioms for type "monitoringstation" defined at spacestation.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__monitoringstation___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__monitoringstation
  use        Spacestation__airlockstatus
  use        Spacestation__airlockstatus__rep
  use        Spacestation__orbitheight
  use        Spacestation__orbitheight__rep
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_181) : Spacestation__monitoringstation.monitoringstation
    ([mlw:proxy_symbol] [introduced] temp___is_init_177) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_178) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_179) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_180) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_182) : Spacestation__monitoringstation.monitoringstation
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_183) : bool)
    requires { True } ensures  { True } returns
     = ((if
        (Spacestation__monitoringstation.spacestation__monitoringstation__airlock1__pred
           ([mlw:proxy_symbol] [introduced] temp___expr_182))
        then
        (( (Spacestation__airlockstatus__rep.to_rep ([mlw:proxy_symbol]
              [introduced] temp___expr_182).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock1))
           = ( 1))
        ) /\
          (if
          (Spacestation__monitoringstation.spacestation__monitoringstation__airlock2__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_182))
          then
          (( (Spacestation__airlockstatus__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_182).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock2))
             = ( 1))
          ) /\
          (if
          (Spacestation__monitoringstation.spacestation__monitoringstation__height__pred
             ([mlw:proxy_symbol] [introduced] temp___expr_182))
          then
          (( (Spacestation__orbitheight__rep.to_rep ([mlw:proxy_symbol]
                [introduced] temp___expr_182).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height))
             = ( 400))
          ))

end

(* Module for possibly declaring a logic function for "airlockinvariant" defined at spacestation.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spacestation__airlockinvariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Spacestation__monitoringstation
  
  function   airlockinvariant
    (Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   airlockinvariant__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : bool
    Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "airlockinvariant" defined at spacestation.ads:14, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spacestation__airlockinvariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__solaris
  use        Spacestation__monitoringstation
  use        Spacestation__monitoringstation___axiom
  use        Spacestation__airlockinvariant
  use        Spacestation__airlockstatus
  use        Spacestation__airlockstatus__rep
  
  function   airlockinvariant (__void_param : unit) requires { True }
    ensures 
    { ((result
          = (Spacestation__airlockinvariant.airlockinvariant
               !Spacestation__solaris.solaris__split_fields)) /\
         (Spacestation__airlockinvariant.airlockinvariant__function_guard
            result !Spacestation__solaris.solaris__split_fields) /\
         (result
            = (((Spacestation__airlockstatus__rep.to_rep
                   ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock1)
                  = 1) \/
                 ((Spacestation__airlockstatus__rep.to_rep
                     ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__airlock2)
                    = 1)))) } returns bool
  
  axiom airlockinvariant__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom airlockinvariant__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for possibly declaring a logic function for "orbitheightinvariant" defined at spacestation.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Spacestation__orbitheightinvariant
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Spacestation__monitoringstation
  
  function   orbitheightinvariant
    (Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields)
    requires { True } ensures  { True } returns bool
  
  function   orbitheightinvariant__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_162) : bool
    Spacestation__solaris___solaris__split_fields___ : Spacestation__monitoringstation.__split_fields)
    requires { True } ensures  { True } returns bool

end

(* Module giving a program function and a defining axiom for the expression function "orbitheightinvariant" defined at spacestation.ads:17, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Spacestation__orbitheightinvariant___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__solaris
  use        Spacestation__monitoringstation
  use        Spacestation__monitoringstation___axiom
  use        Spacestation__orbitheightinvariant
  use        Spacestation__orbitheight
  use        Spacestation__orbitheight__rep
  
  function   orbitheightinvariant (__void_param : unit) requires { True }
    ensures 
    { ((result
          = (Spacestation__orbitheightinvariant.orbitheightinvariant
               !Spacestation__solaris.solaris__split_fields)) /\
         (Spacestation__orbitheightinvariant.orbitheightinvariant__function_guard
            result !Spacestation__solaris.solaris__split_fields) /\
         (result
            = (((Spacestation__orbitheight__rep.to_rep
                   ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height)
                  >= 300) /\
                 ((Spacestation__orbitheight__rep.to_rep
                     ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height)
                    <= 450)))) } returns bool
  
  axiom orbitheightinvariant__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom orbitheightinvariant__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "airlockstatus" defined at spacestation.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__airlockstatus___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__airlockstatus
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_167) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_165) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_166) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_163) = True) \/
          (Spacestation__airlockstatus.first
             <= Spacestation__airlockstatus.last))
       then
       (Spacestation__airlockstatus.dynamic_property
          Spacestation__airlockstatus.first Spacestation__airlockstatus.last
          ([mlw:proxy_symbol] [introduced] temp___expr_167))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_168) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_169) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "orbitheight" defined at spacestation.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Spacestation__orbitheight___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__orbitheight
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_174) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_170) = True) \/
          (Spacestation__orbitheight.first <= Spacestation__orbitheight.last))
       then
       (Spacestation__orbitheight.dynamic_property
          Spacestation__orbitheight.first Spacestation__orbitheight.last
          ([mlw:proxy_symbol] [introduced] temp___expr_174))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_175) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_176) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "solaris" defined at spacestation.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spacestation__solaris___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "increaseheight" defined at spacestation.ads:60, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spacestation__increaseheight__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Spacestation__solaris
  use        Spacestation__monitoringstation
  use        Spacestation__monitoringstation___axiom
  use        Spacestation__airlockinvariant
  use        Spacestation__airlockinvariant___axiom
  use        Spacestation__orbitheightinvariant
  use        Spacestation__orbitheightinvariant___axiom
  use        Spacestation__orbitheight
  use        Spacestation__orbitheight__rep
  use        Spacestation__airlockstatus___axiom
  use        Spacestation__orbitheight___axiom
  use        Spacestation__monitoringstation___axiom
  use        Spacestation__solaris___axiom
  use        Spacestation__airlockinvariant___axiom
  use        Spacestation__orbitheightinvariant___axiom
  
  function [GP_Subp:spacestation.ads:60] [sloc:spacestation.ads:60] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:spacestation.ads:65] ([GP_Reason:VC_POSTCONDITION]
                                  [GP_Sloc:spacestation.ads:65:14]
                                  [GP_Shape:pragargs__andthen]
                                  [model_vc_post]
                                  [comment:     Post => solaris.height <= OrbitHeight'Last              ^ spacestation.ads:65:14:VC_POSTCONDITION]
                                  [GP_Id:5] ((([GP_Sloc:spacestation.ads:65:14]
                                              [GP_Pretty_Ada:1145] ((Spacestation__orbitheight__rep.to_rep
                                                                    ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height)
                                                                    <= 450))
                                                /\
                                                ([GP_Pretty_Ada:1148]
                                                [GP_Sloc:spacestation.ads:66:15] (
                                                (epsilon ([mlw:proxy_symbol]
                                                [introduced] temp___result_244) : bool {
                                                ((([mlw:proxy_symbol]
                                                    [introduced] temp___result_244)
                                                    = (Spacestation__orbitheightinvariant.orbitheightinvariant
                                                         !Spacestation__solaris.solaris__split_fields))
                                                   /\
                                                   (Spacestation__orbitheightinvariant.orbitheightinvariant__function_guard
                                                      ([mlw:proxy_symbol]
                                                      [introduced] temp___result_244)
                                                      !Spacestation__solaris.solaris__split_fields))})
                                                  = True))) /\
                                               ([GP_Sloc:spacestation.ads:67:15]
                                               [GP_Pretty_Ada:1150] (
                                               (epsilon ([mlw:proxy_symbol]
                                               [introduced] temp___result_245) : bool {
                                               ((([mlw:proxy_symbol]
                                                   [introduced] temp___result_245)
                                                   = (Spacestation__airlockinvariant.airlockinvariant
                                                        !Spacestation__solaris.solaris__split_fields))
                                                  /\
                                                  (Spacestation__airlockinvariant.airlockinvariant__function_guard
                                                     ([mlw:proxy_symbol]
                                                     [introduced] temp___result_245)
                                                     !Spacestation__solaris.solaris__split_fields))})
                                                 = True))))) } returns
     = (* Assume dynamic invariants of inputs of the subprogram spacestation.ads:60 *);
        assume
        { (Spacestation__monitoringstation___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram spacestation.ads:60 *);
        (* Check for RTE in the Pre of the subprogram spacestation.ads:60 *);
        abstract ensures
        { True } begin  (let _ =
                       ((((Spacestation__orbitheight__rep.to_rep
                             ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height)
                            < 450) &&
                           (Spacestation__orbitheightinvariant___axiom.orbitheightinvariant
                              ())) &&
                          (Spacestation__airlockinvariant___axiom.airlockinvariant
                             ()))
                       in ())  end;
        (* Assume Pre of the subprogram spacestation.ads:60 *);
        assume
        { ((([GP_Pretty_Ada:1131] ((Spacestation__orbitheight__rep.to_rep
                                      ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height)
                                     < 450)) /\
              ([GP_Pretty_Ada:1134] ((epsilon ([mlw:proxy_symbol]
                                     [introduced] temp___result_242) : bool {
                                     ((([mlw:proxy_symbol]
                                         [introduced] temp___result_242)
                                         = (Spacestation__orbitheightinvariant.orbitheightinvariant
                                              !Spacestation__solaris.solaris__split_fields))
                                        /\
                                        (Spacestation__orbitheightinvariant.orbitheightinvariant__function_guard
                                           ([mlw:proxy_symbol]
                                           [introduced] temp___result_242)
                                           !Spacestation__solaris.solaris__split_fields))})
                                       = True))) /\
             ([GP_Pretty_Ada:1136] ((epsilon ([mlw:proxy_symbol]
                                    [introduced] temp___result_243) : bool {
                                    ((([mlw:proxy_symbol]
                                        [introduced] temp___result_243)
                                        = (Spacestation__airlockinvariant.airlockinvariant
                                             !Spacestation__solaris.solaris__split_fields))
                                       /\
                                       (Spacestation__airlockinvariant.airlockinvariant__function_guard
                                          ([mlw:proxy_symbol]
                                          [introduced] temp___result_243)
                                          !Spacestation__solaris.solaris__split_fields))})
                                      = True))) };
        (try
        ();
          ([GP_Sloc:spacestation.adb:25:7] ([sloc:spacestation.adb:25] ()));
          ([GP_Sloc:spacestation.adb:25:25] ([sloc:spacestation.adb:25] ()));
          ([GP_Sloc:spacestation.adb:25:22] ([sloc:spacestation.adb:25] (let ([mlw:proxy_symbol]
                                            [introduced] temp___241) =
                                            (let ([mlw:proxy_symbol]
                                              [introduced] temp___240) =
                                              ( --pp_record_aggregate NOT IMPLEMENTED)
                                              in abstract ensures
                                              { True } begin  (let _ =
                                                             ([mlw:proxy_symbol]
                                                               [introduced] temp___240).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height
                                                             in ())  end;
                                              --pp_record_update NOT IMPLEMENTED)
                                            in (
                                            Spacestation__solaris.solaris__split_fields
                                            :=
                                            ([mlw:proxy_symbol]
                                              [introduced] temp___241).Spacestation__monitoringstation.__split_fields))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       ((((Spacestation__orbitheight__rep.to_rep
                             ( --pp_record_aggregate NOT IMPLEMENTED).Spacestation__monitoringstation.__split_fields.Spacestation__monitoringstation.rec__spacestation__monitoringstation__height)
                            <= 450) &&
                           (Spacestation__orbitheightinvariant___axiom.orbitheightinvariant
                              ())) &&
                          (Spacestation__airlockinvariant___axiom.airlockinvariant
                             ()))
                       in ())  end

end
